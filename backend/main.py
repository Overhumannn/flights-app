# backend/main.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from flights.api_client import fetch_today_schedule
from flights.explorer import FlightsExplorer
from flights.llm_adapter import ask_llm

app = FastAPI(title="Flights Q&A API", version="1.0")

class QueryRequest(BaseModel):
    airport_code: str
    question: str

class QueryResponse(BaseModel):
    answer: str

@app.post("/query", response_model=QueryResponse)
async def query_flights(req: QueryRequest):
    """
    Receives a user's question about a specific airport and returns an answer generated by LLM.
    """
    try:
        # Fetch flights data
        flights_df = await fetch_today_schedule(req.airport_code)
        
        if flights_df.empty:
            return QueryResponse(
                answer=f"No flight data available for airport {req.airport_code} today."
            )
        
        # Get summary for LLM
        explorer = FlightsExplorer(flights_df)
        context = explorer.summarize_for_llm()
        
        # Build prompt - все на английском
        prompt = f"""Flight Data for Airport {req.airport_code}:
{context}

User Question: {req.question}

Provide a clear, specific answer in English using ONLY the data above. Include numbers and facts. Keep it under 3 sentences."""
        
        # Ask LLM (DeepSeek)
        answer = await ask_llm(prompt)
        
        return QueryResponse(answer=answer)
    
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    return {"status": "ok"}